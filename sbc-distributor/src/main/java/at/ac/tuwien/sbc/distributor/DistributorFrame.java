package at.ac.tuwien.sbc.distributor;

import at.ac.tuwien.sbc.DistributorConnector;
import at.ac.tuwien.sbc.model.ClockType;
import java.awt.EventQueue;
import java.util.EnumMap;
import java.util.Map;

/**
 * The GUI of the distributor application
 */
public class DistributorFrame extends javax.swing.JFrame {

    private final DistributorConnector connector;

    private final ClockList clockList;
    private final ClockTableModel clockTableModel;

    private final Runnable updateCountAction = new Runnable() {

        @Override
        public void run() {
            java.awt.EventQueue.invokeLater(new Runnable() {
                @Override
                public void run() {
                    clockTableModel.fireTableDataChanged();
                    classicClockCount.setText(String.valueOf(clockList.getClockCount(ClockType.KLASSISCH)));
                    sportsClockCount.setText(String.valueOf(clockList.getClockCount(ClockType.SPORT)));
                    timezoneClockCount.setText(String.valueOf(clockList.getClockCount(ClockType.ZEITZONEN_SPORT)));
                }
            });
        }
    };

    public DistributorFrame(DistributorConnector connector) {
        this.connector = connector;

        clockList = new ClockList();
        clockTableModel = new ClockTableModel(clockList);

        final DistributorClockListener clockListener = new DistributorClockListener(clockList, updateCountAction);

        // Removes clocks from the clock list, lets the connector know of the removal and then invokes the updateCountAction
        final ClockConsumer clockConsumer = new ClockConsumer(clockList, updateCountAction, connector);
        final Thread clockConsumerThread = new Thread(clockConsumer);
        clockConsumerThread.setDaemon(true);
        clockConsumerThread.start();

        // Register listener for clock deliveries
        connector.subscribeForDistributorDeliveries(clockListener);

        initComponents();
    }

    private void updateOrderCounts() {
        // Update current order counts
        clockList.setOrderCount(ClockType.KLASSISCH, Integer.parseInt(classicClockDemandTextField.getText()));
        clockList.setOrderCount(ClockType.SPORT, Integer.parseInt(sportsClockDemandTextField.getText()));
        clockList.setOrderCount(ClockType.ZEITZONEN_SPORT, Integer.parseInt(timezoneClockDemandTextField.getText()));

        // Retriev current demand counts
        final Map<ClockType, Integer> demand = new EnumMap<ClockType, Integer>(ClockType.class);
        int classicDemand = clockList.getDemandCount(ClockType.KLASSISCH);
        int sportsDemand = clockList.getDemandCount(ClockType.SPORT);
        int timezoneDemand = clockList.getDemandCount(ClockType.ZEITZONEN_SPORT);

        // Only put the demand into the demand map if it actually is greater than 0
        if (classicDemand > 0) {
            demand.put(ClockType.KLASSISCH, classicDemand);
        }
        if (sportsDemand > 0) {
            demand.put(ClockType.SPORT, sportsDemand);
        }
        if (timezoneDemand > 0) {
            demand.put(ClockType.ZEITZONEN_SPORT, timezoneDemand);
        }

        // Let the factory know of our current demand
        connector.setDemand(demand);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        sportsClockDemandTextField = new javax.swing.JTextField();
        classicClockDemandTextField = new javax.swing.JTextField();
        timezoneClockDemandTextField = new javax.swing.JTextField();
        classicClockCount = new javax.swing.JLabel();
        sportsClockCount = new javax.swing.JLabel();
        timezoneClockCount = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        updateDemandButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Gewünschter Lagerstand:");

        jLabel2.setText("Klassische Uhren:");

        jLabel3.setText("Sportuhren:");

        jLabel4.setText("Sportuhren mit zweiter Zeitzone:");

        sportsClockDemandTextField.setText("0");

        classicClockDemandTextField.setText("0");

        timezoneClockDemandTextField.setText("0");

        classicClockCount.setText("0");

        sportsClockCount.setText("0");

        timezoneClockCount.setText("0");

        jLabel11.setText("Auf Lager:");

        jTable1.setModel(clockTableModel);
        jScrollPane1.setViewportView(jTable1);

        updateDemandButton.setText("verändern");
        updateDemandButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                updateDemandButtonMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel2))
                                    .addGap(193, 193, 193)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(classicClockDemandTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(sportsClockDemandTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel4)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(timezoneClockDemandTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(updateDemandButton, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(111, 111, 111)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(36, 36, 36)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(classicClockCount, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(sportsClockCount, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(timezoneClockCount, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel11))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1018, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addGap(17, 17, 17)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(0, 0, 0)
                                .addComponent(classicClockDemandTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(sportsClockDemandTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                                .addComponent(timezoneClockDemandTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel11)
                                .addGap(0, 0, 0)
                                .addComponent(classicClockCount)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(sportsClockCount)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                                .addComponent(timezoneClockCount)))
                        .addGap(14, 14, 14)
                        .addComponent(updateDemandButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 468, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

	private void updateDemandButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateDemandButtonMouseReleased
        EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                updateOrderCounts();
            }

        });

	}//GEN-LAST:event_updateDemandButtonMouseReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel classicClockCount;
    private javax.swing.JTextField classicClockDemandTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel sportsClockCount;
    private javax.swing.JTextField sportsClockDemandTextField;
    private javax.swing.JLabel timezoneClockCount;
    private javax.swing.JTextField timezoneClockDemandTextField;
    private javax.swing.JButton updateDemandButton;
    // End of variables declaration//GEN-END:variables

    public static void start(final DistributorConnector connector) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new DistributorFrame(connector).setVisible(true);
            }
        });
    }
}

This project is our solution to the assignment 1 of the course "Distributed Programming with Space Based Computing Middleware".

We are using Maven as our build system and chose to use MozartSpaces for the Space-Technology and JMS for the Non-Space-Technology part. To build and run the application only Java 1.6+ and an installation of Maven is necessary.

Since we are using a multi module project layout you only have to invoke "mvn install" in the root directory to compile, package and install the artifacts into your local repository. To start the application we offer a scripts which are contained in the "bin" directory. As you can see we have a subdirectory "jms" and "xvsm" which both contain the same scripts but the first is for the JMS and the second for the MozartSpaces implementation. There are scripts for both, Windows(".bat" files) and Linux(".sh" files).

To start either the JMS server or the MozartSpaces server use:
 - Windows: /jms/server.bat  or Linux: /jms/server.sh
 - Windows: /xvsm/server.bat or Linux: /xvsm/server.sh

Start GUI:
 - Windows: /jms/gui.bat  or Linux: /jms/gui.sh
 - Windows: /xvsm/gui.bat or Linux: /xvsm/gui.sh
	
Start assembly employee:
 - Windows: /jms/assembler.bat  or Linux: /jms/assembler.sh
 - Windows: /xvsm/assembler.bat or Linux: /xvsm/checker.sh
Start quality assurance employee:
 - Windows: /jms/checker.bat  or Linux: /jms/checker.sh
 - Windows: /xvsm/checker.bat or Linux: /xvsm/checker.sh
Start logistics employee for Class A clocks:
 - Windows: /jms/deliverer-a.bat  or Linux: /jms/deliverer-a.sh
 - Windows: /xvsm/deliverer-a.bat or Linux: /xvsm/deliverer-a.sh
Start logistics employee for Class B clocks:
 - Windows: /jms/deliverer-b.bat  or Linux: /jms/deliverer-b.sh
 - Windows: /xvsm/deliverer-b.bat or Linux: /xvsm/deliverer-b.sh